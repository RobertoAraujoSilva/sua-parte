import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { supabase } from '../integrations/supabase/client';
import { User, Session, AuthError } from '@supabase/supabase-js';

interface Profile {
  id: string;
  email: string;
  role: string;
  nome_completo?: string;
  congregacao?: string;
  cargo?: string;
  created_at: string;
  updated_at: string;
}

interface AuthContextType {
  user: User | null;
  profile: Profile | null;
  isAdmin: boolean;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<{ error: AuthError | null }>;
  signUp: (email: string, password: string, profileData: Partial<Profile>) => Promise<{ error: AuthError | null }>;
  signOut: () => Promise<void>;
  refreshAuth: () => Promise<void>;
  clearAuthError: () => void;
  authError: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [authError, setAuthError] = useState<string | null>(null);

  // üîÑ Fun√ß√£o para recuperar autentica√ß√£o
  const refreshAuth = useCallback(async () => {
    try {
      console.log('üîÑ Attempting to refresh authentication...');
      
      // Tentar obter sess√£o atual
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('‚ùå Session error:', sessionError);
        setAuthError(`Erro de sess√£o: ${sessionError.message}`);
        return;
      }

      if (session) {
        console.log('‚úÖ Valid session found, updating user state');
        setUser(session.user);
        await loadProfile(session.user.id);
      } else {
        console.log('‚ö†Ô∏è No valid session found, clearing auth state');
        setUser(null);
        setProfile(null);
      }
    } catch (error) {
      console.error('‚ùå Error refreshing auth:', error);
      setAuthError('Erro ao atualizar autentica√ß√£o');
      
      // Limpar estado em caso de erro cr√≠tico
      setUser(null);
      setProfile(null);
    } finally {
      setLoading(false);
    }
  }, []);

  // üîÑ Fun√ß√£o para carregar perfil do usu√°rio
  const loadProfile = useCallback(async (userId: string) => {
    try {
      console.log('üîç Loading profile for user:', userId);
      
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (profileError) {
        console.error('‚ùå Error loading profile:', profileError);
        setAuthError(`Erro ao carregar perfil: ${profileError.message}`);
        return;
      }

      if (profileData) {
        console.log('‚úÖ Profile loaded successfully:', profileData);
        setProfile(profileData);
      } else {
        console.log('‚ö†Ô∏è No profile found for user');
        setProfile(null);
      }
    } catch (error) {
      console.error('‚ùå Error in loadProfile:', error);
      setAuthError('Erro interno ao carregar perfil');
    }
  }, []);

  // üîÑ Fun√ß√£o para lidar com mudan√ßas de autentica√ß√£o
  const handleAuthStateChange = useCallback(async (event: string, session: Session | null) => {
    console.log('üîÑ Auth state change:', event, session?.user?.id);
    
    try {
      if (event === 'SIGNED_IN' && session) {
        console.log('‚úÖ User signed in:', session.user.id);
        setUser(session.user);
        await loadProfile(session.user.id);
        setAuthError(null); // Limpar erros anteriores
      } else if (event === 'SIGNED_OUT') {
        console.log('üö™ User signed out');
        setUser(null);
        setProfile(null);
        setAuthError(null);
      } else if (event === 'TOKEN_REFRESHED' && session) {
        console.log('üîÑ Token refreshed for user:', session.user.id);
        setUser(session.user);
        await loadProfile(session.user.id);
        setAuthError(null);
      } else if (event === 'USER_UPDATED' && session) {
        console.log('üë§ User updated:', session.user.id);
        setUser(session.user);
        await loadProfile(session.user.id);
      }
    } catch (error) {
      console.error('‚ùå Error handling auth state change:', error);
      setAuthError('Erro ao processar mudan√ßa de autentica√ß√£o');
    } finally {
      setLoading(false);
    }
  }, [loadProfile]);

  // üîÑ Fun√ß√£o para lidar com erros de autentica√ß√£o
  const handleAuthError = useCallback((error: AuthError) => {
    console.error('‚ùå Auth error detected:', error);
    
    if (error.message.includes('Invalid Refresh Token') || 
        error.message.includes('Refresh Token Not Found') ||
        error.message.includes('JWT expired')) {
      
      console.log('üîÑ Invalid refresh token detected, clearing auth state');
      setUser(null);
      setProfile(null);
      setAuthError('Sess√£o expirada. Por favor, fa√ßa login novamente.');
      
      // Limpar tokens inv√°lidos
      supabase.auth.signOut();
    } else {
      setAuthError(`Erro de autentica√ß√£o: ${error.message}`);
    }
  }, []);

  // üîÑ Fun√ß√£o de login com tratamento de erro robusto
  const signIn = useCallback(async (email: string, password: string) => {
    try {
      console.log('üîê Attempting sign in for:', email);
      setLoading(true);
      setAuthError(null);

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error('‚ùå Sign in error:', error);
        setAuthError(`Erro no login: ${error.message}`);
        return { error };
      }

      if (data.user) {
        console.log('‚úÖ Sign in successful for:', data.user.id);
        setUser(data.user);
        await loadProfile(data.user.id);
        setAuthError(null);
      }

      return { error: null };
    } catch (error) {
      console.error('‚ùå Unexpected error during sign in:', error);
      setAuthError('Erro inesperado durante o login');
      return { error: error as AuthError };
    } finally {
      setLoading(false);
    }
  }, [loadProfile]);

  // üîÑ Fun√ß√£o de cadastro com tratamento de erro robusto
  const signUp = useCallback(async (email: string, password: string, profileData: Partial<Profile>) => {
    try {
      console.log('üìù Attempting sign up for:', email);
      setLoading(true);
      setAuthError(null);

      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: profileData,
        },
      });

      if (error) {
        console.error('‚ùå Sign up error:', error);
        setAuthError(`Erro no cadastro: ${error.message}`);
        return { error };
      }

      if (data.user) {
        console.log('‚úÖ Sign up successful for:', data.user.id);
        setUser(data.user);
        setAuthError(null);
      }

      return { error: null };
    } catch (error) {
      console.error('‚ùå Unexpected error during sign up:', error);
      setAuthError('Erro inesperado durante o cadastro');
      return { error: error as AuthError };
    } finally {
      setLoading(false);
    }
  }, []);

  // üîÑ Fun√ß√£o de logout com limpeza completa
  const signOut = useCallback(async () => {
    try {
      console.log('üö™ Signing out user');
      setLoading(true);
      
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå Sign out error:', error);
        setAuthError(`Erro no logout: ${error.message}`);
      } else {
        console.log('‚úÖ Sign out successful');
        setUser(null);
        setProfile(null);
        setAuthError(null);
      }
    } catch (error) {
      console.error('‚ùå Unexpected error during sign out:', error);
      setAuthError('Erro inesperado durante o logout');
    } finally {
      setLoading(false);
    }
  }, []);

  // üîÑ Fun√ß√£o para limpar erros de autentica√ß√£o
  const clearAuthError = useCallback(() => {
    setAuthError(null);
  }, []);

  // üîÑ Efeito para inicializar autentica√ß√£o
  useEffect(() => {
    console.log('üöÄ Initializing authentication...');
    
    // Configurar listeners de autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange(handleAuthStateChange);

    // Tentar recuperar sess√£o inicial
    refreshAuth();

    // Cleanup
    return () => {
      console.log('üßπ Cleaning up auth listeners');
      subscription.unsubscribe();
    };
  }, [handleAuthStateChange, refreshAuth]);

  // üîÑ Efeito para monitorar erros de autentica√ß√£o
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      if (event === 'TOKEN_REFRESHED' && !session) {
        console.log('üîÑ Token refresh failed, clearing auth state');
        setUser(null);
        setProfile(null);
        setAuthError('Sess√£o expirada. Por favor, fa√ßa login novamente.');
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  // üîÑ Computar se o usu√°rio √© admin
  const isAdmin = profile?.role === 'admin';

  const value: AuthContextType = {
    user,
    profile,
    isAdmin,
    loading,
    signIn,
    signUp,
    signOut,
    refreshAuth,
    clearAuthError,
    authError,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};