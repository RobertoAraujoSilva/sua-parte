import { supabase } from '../../src/integrations/supabase/client'

describe('üß™ Sistema Ministerial - Teste Completo E2E', () => {
  beforeEach(() => {
    // Interceptar requisi√ß√µes de autentica√ß√£o
    cy.intercept('POST', '**/auth/v1/token').as('authToken')
    cy.intercept('GET', '**/auth/v1/user').as('authUser')
    
    // Interceptar requisi√ß√µes do Supabase
    cy.intercept('POST', '**/rest/v1/**').as('supabaseRest')
    cy.intercept('GET', '**/rest/v1/**').as('supabaseGet')
    
    // Limpar cookies e localStorage antes de cada teste
    cy.clearCookies()
    cy.clearLocalStorage()
  })

  describe('üîê Sistema de Autentica√ß√£o', () => {
    it('Deve permitir login como Instrutor (Admin)', () => {
      cy.loginAsInstructor()
      
      // Verificar redirecionamento para dashboard
      cy.url().should('include', '/dashboard')
      
      // Verificar se o usu√°rio est√° autenticado
      cy.get('[data-testid="user-menu"], .user-menu, [role="button"]:contains("Usu√°rio")')
        .should('be.visible')
      
      cy.log('‚úÖ Login como Instrutor realizado com sucesso')
    })

    it('Deve permitir login como Estudante', () => {
      cy.loginAsStudent()
      
      // Verificar redirecionamento para portal do estudante
      cy.url().should('include', '/estudante/')
      
      // Verificar se o usu√°rio est√° autenticado
      cy.get('[data-testid="student-portal"], .student-portal')
        .should('be.visible')
      
      cy.log('‚úÖ Login como Estudante realizado com sucesso')
    })

    it('Deve bloquear acesso a rotas protegidas sem autentica√ß√£o', () => {
      // Tentar acessar dashboard sem login
      cy.visit('/dashboard')
      cy.url().should('include', '/auth')
      
      // Tentar acessar sistema de equidade sem login
      cy.visit('/equidade')
      cy.url().should('include', '/auth')
      
      cy.log('‚úÖ Prote√ß√£o de rotas funcionando corretamente')
    })
  })

  describe('üè† Dashboard Principal', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/dashboard')
      cy.waitForPageLoad()
    })

    it('Deve exibir dashboard completo para instrutores', () => {
      // Verificar elementos principais do dashboard
      cy.get('[data-testid="dashboard-stats"], .dashboard-stats')
        .should('be.visible')
      
      cy.get('[data-testid="recent-assignments"], .recent-assignments')
        .should('be.visible')
      
      cy.get('[data-testid="quick-actions"], .quick-actions')
        .should('be.visible')
      
      cy.log('‚úÖ Dashboard principal carregado corretamente')
    })

    it('Deve permitir navega√ß√£o para todas as se√ß√µes', () => {
      // Navegar para Estudantes
      cy.get('a[href="/estudantes"], button:contains("Estudantes")')
        .should('be.visible')
        .click()
      
      cy.url().should('include', '/estudantes')
      cy.get('[data-testid="students-grid"], .students-grid')
        .should('be.visible')
      
      // Voltar para dashboard
      cy.visit('/dashboard')
      
      // Navegar para Programas
      cy.get('a[href="/programas"], button:contains("Programas")')
        .should('be.visible')
        .click()
      
      cy.url().should('include', '/programas')
      cy.get('[data-testid="programs-list"], .programs-list')
        .should('be.visible')
      
      cy.log('‚úÖ Navega√ß√£o entre se√ß√µes funcionando')
    })
  })

  describe('‚öñÔ∏è Sistema de Equidade', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/equidade')
      cy.waitForPageLoad()
    })

    it('Deve exibir todas as abas do sistema de equidade', () => {
      // Verificar abas principais
      cy.get('[role="tablist"], .tabs-list')
        .should('be.visible')
      
      // Verificar conte√∫do das abas
      cy.get('[role="tab"]:contains("Hist√≥rico")').should('be.visible')
      cy.get('[role="tab"]:contains("Fila Justa")').should('be.visible')
      cy.get('[role="tab"]:contains("Pol√≠ticas")').should('be.visible')
      cy.get('[role="tab"]:contains("Simula√ß√£o")').should('be.visible')
      cy.get('[role="tab"]:contains("Relat√≥rios")').should('be.visible')
      
      cy.log('‚úÖ Todas as abas do sistema de equidade est√£o vis√≠veis')
    })

    it('Deve calcular fila justa corretamente', () => {
      // Clicar na aba Fila Justa
      cy.get('[role="tab"]:contains("Fila Justa")').click()
      
      // Verificar se a fila est√° sendo calculada
      cy.get('[data-testid="fair-queue"], .fair-queue')
        .should('be.visible')
      
      // Verificar se h√° estudantes na fila
      cy.get('[data-testid="queue-item"], .queue-item')
        .should('have.length.greaterThan', 0)
      
      cy.log('‚úÖ Sistema de fila justa funcionando')
    })

    it('Deve aplicar pol√≠ticas de fairness', () => {
      // Clicar na aba Pol√≠ticas
      cy.get('[role="tab"]:contains("Pol√≠ticas")').click()
      
      // Verificar configura√ß√µes de fairness
      cy.get('[data-testid="fairness-policies"], .fairness-policies')
        .should('be.visible')
      
      // Verificar se as pol√≠ticas est√£o sendo aplicadas
      cy.get('[data-testid="policy-item"], .policy-item')
        .should('have.length.greaterThan', 0)
      
      cy.log('‚úÖ Pol√≠ticas de fairness configuradas')
    })
  })

  describe('üë• Gest√£o de Estudantes', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/estudantes')
      cy.waitForPageLoad()
    })

    it('Deve exibir lista de estudantes', () => {
      // Verificar grid de estudantes
      cy.get('[data-testid="students-grid"], .students-grid')
        .should('be.visible')
      
      // Verificar se h√° estudantes cadastrados
      cy.get('[data-testid="student-card"], .student-card')
        .should('have.length.greaterThan', 0)
      
      cy.log('‚úÖ Lista de estudantes carregada')
    })

    it('Deve permitir adicionar novo estudante', () => {
      // Clicar no bot√£o de adicionar
      cy.get('[data-testid="add-student"], button:contains("Adicionar"), button:contains("+")')
        .should('be.visible')
        .click()
      
      // Verificar se o modal/formul√°rio abre
      cy.get('[data-testid="student-form"], .student-form, [role="dialog"]')
        .should('be.visible')
      
      cy.log('‚úÖ Funcionalidade de adicionar estudante funcionando')
    })

    it('Deve exibir informa√ß√µes completas dos estudantes', () => {
      // Clicar no primeiro estudante para ver detalhes
      cy.get('[data-testid="student-card"], .student-card')
        .first()
        .click()
      
      // Verificar campos S-38
      cy.get('[data-testid="student-details"], .student-details')
        .should('be.visible')
      
      // Verificar se h√° informa√ß√µes de fam√≠lia
      cy.get('[data-testid="family-info"], .family-info')
        .should('be.visible')
      
      cy.log('‚úÖ Detalhes completos dos estudantes funcionando')
    })
  })

  describe('üìö Gest√£o de Programas', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/programas')
      cy.waitForPageLoad()
    })

    it('Deve exibir lista de programas', () => {
      // Verificar lista de programas
      cy.get('[data-testid="programs-list"], .programs-list')
        .should('be.visible')
      
      // Verificar se h√° programas cadastrados
      cy.get('[data-testid="program-card"], .program-card')
        .should('have.length.greaterThan', 0)
      
      cy.log('‚úÖ Lista de programas carregada')
    })

    it('Deve permitir criar novo programa', () => {
      // Clicar no bot√£o de criar programa
      cy.get('[data-testid="create-program"], button:contains("Criar"), button:contains("Novo")')
        .should('be.visible')
        .click()
      
      // Verificar se o modal/formul√°rio abre
      cy.get('[data-testid="program-form"], .program-form, [role="dialog"]')
        .should('be.visible')
      
      cy.log('‚úÖ Funcionalidade de criar programa funcionando')
    })

    it('Deve permitir upload de PDF', () => {
      // Verificar se h√° campo de upload
      cy.get('[data-testid="pdf-upload"], input[type="file"], .file-upload')
        .should('be.visible')
      
      cy.log('‚úÖ Upload de PDF dispon√≠vel')
    })
  })

  describe('üéØ Sistema de Designa√ß√µes', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/designacoes')
      cy.waitForPageLoad()
    })

    it('Deve exibir designa√ß√µes ativas', () => {
      // Verificar lista de designa√ß√µes
      cy.get('[data-testid="assignments-list"], .assignments-list')
        .should('be.visible')
      
      // Verificar se h√° designa√ß√µes
      cy.get('[data-testid="assignment-item"], .assignment-item')
        .should('have.length.greaterThan', 0)
      
      cy.log('‚úÖ Lista de designa√ß√µes carregada')
    })

    it('Deve permitir gerar designa√ß√µes automaticamente', () => {
      // Verificar bot√£o de gera√ß√£o autom√°tica
      cy.get('[data-testid="auto-generate"], button:contains("Gerar"), button:contains("Autom√°tico")')
        .should('be.visible')
      
      cy.log('‚úÖ Gera√ß√£o autom√°tica de designa√ß√µes dispon√≠vel')
    })

    it('Deve aplicar regras S-38', () => {
      // Verificar se as valida√ß√µes S-38 est√£o funcionando
      cy.get('[data-testid="s38-validation"], .s38-validation')
        .should('be.visible')
      
      cy.log('‚úÖ Valida√ß√µes S-38 implementadas')
    })
  })

  describe('üîß Dashboard Administrativo', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/admin')
      cy.waitForPageLoad()
    })

    it('Deve exibir dashboard administrativo', () => {
      // Verificar se o dashboard admin est√° acess√≠vel
      cy.get('[data-testid="admin-dashboard"], .admin-dashboard')
        .should('be.visible')
      
      // Verificar abas administrativas
      cy.get('[role="tab"]:contains("Downloads")').should('be.visible')
      cy.get('[role="tab"]:contains("Organiza√ß√£o")').should('be.visible')
      cy.get('[role="tab"]:contains("Publica√ß√£o")').should('be.visible')
      cy.get('[role="tab"]:contains("Monitoramento")').should('be.visible')
      cy.get('[role="tab"]:contains("Configura√ß√µes")').should('be.visible')
      
      cy.log('‚úÖ Dashboard administrativo funcionando')
    })

    it('Deve permitir gest√£o de materiais MWB', () => {
      // Clicar na aba Downloads
      cy.get('[role="tab"]:contains("Downloads")').click()
      
      // Verificar funcionalidades de download
      cy.get('[data-testid="mwb-download"], .mwb-download')
        .should('be.visible')
      
      cy.log('‚úÖ Gest√£o de materiais MWB funcionando')
    })
  })

  describe('üì± Responsividade e Mobile', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
    })

    it('Deve funcionar em dispositivos m√≥veis', () => {
      // Testar em viewport m√≥vel
      cy.viewport('iphone-x')
      
      cy.visit('/dashboard')
      cy.waitForPageLoad()
      
      // Verificar se o menu mobile est√° funcionando
      cy.get('[data-testid="mobile-menu"], .mobile-menu, [aria-label="Menu"]')
        .should('be.visible')
        .click()
      
      // Verificar navega√ß√£o mobile
      cy.get('[data-testid="mobile-nav"], .mobile-nav')
        .should('be.visible')
      
      cy.log('‚úÖ Interface mobile funcionando')
    })

    it('Deve adaptar layout para diferentes densidades', () => {
      cy.visit('/estudantes')
      cy.waitForPageLoad()
      
      // Verificar se h√° controle de densidade
      cy.get('[data-testid="density-toggle"], .density-toggle')
        .should('be.visible')
      
      cy.log('‚úÖ Controle de densidade dispon√≠vel')
    })
  })

  describe('üåç Sistema Multil√≠ngue', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/dashboard')
      cy.waitForPageLoad()
    })

    it('Deve suportar portugu√™s e ingl√™s', () => {
      // Verificar se h√° seletor de idioma
      cy.get('[data-testid="language-selector"], .language-selector, [aria-label="Idioma"]')
        .should('be.visible')
      
      // Verificar se o conte√∫do est√° em portugu√™s por padr√£o
      cy.get('body').should('contain', 'Dashboard')
      
      cy.log('‚úÖ Sistema multil√≠ngue funcionando')
    })
  })

  describe('üîí Seguran√ßa e Valida√ß√µes', () => {
    it('Deve aplicar Row Level Security (RLS)', () => {
      // Fazer login como estudante
      cy.loginAsStudent()
      
      // Tentar acessar √°rea de instrutor
      cy.visit('/estudantes')
      
      // Verificar se o acesso √© bloqueado
      cy.url().should('not.include', '/estudantes')
      
      cy.log('‚úÖ RLS funcionando corretamente')
    })

    it('Deve validar permiss√µes por perfil', () => {
      // Fazer login como estudante
      cy.loginAsStudent()
      
      // Tentar acessar dashboard administrativo
      cy.visit('/admin')
      
      // Verificar se o acesso √© bloqueado
      cy.url().should('not.include', '/admin')
      
      cy.log('‚úÖ Valida√ß√£o de permiss√µes funcionando')
    })
  })

  describe('üìä Relat√≥rios e Estat√≠sticas', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/relatorios')
      cy.waitForPageLoad()
    })

    it('Deve exibir relat√≥rios do sistema', () => {
      // Verificar se h√° relat√≥rios dispon√≠veis
      cy.get('[data-testid="reports-section"], .reports-section')
        .should('be.visible')
      
      cy.log('‚úÖ Relat√≥rios do sistema funcionando')
    })

    it('Deve mostrar estat√≠sticas em tempo real', () => {
      // Verificar estat√≠sticas
      cy.get('[data-testid="stats-cards"], .stats-cards')
        .should('be.visible')
      
      cy.log('‚úÖ Estat√≠sticas em tempo real funcionando')
    })
  })

  describe('üîÑ Sincroniza√ß√£o e Performance', () => {
    beforeEach(() => {
      cy.loginAsInstructor()
      cy.visit('/dashboard')
      cy.waitForPageLoad()
    })

    it('Deve sincronizar dados em tempo real', () => {
      // Verificar se h√° indicadores de sincroniza√ß√£o
      cy.get('[data-testid="sync-status"], .sync-status')
        .should('be.visible')
      
      cy.log('‚úÖ Sincroniza√ß√£o em tempo real funcionando')
    })

    it('Deve carregar p√°ginas rapidamente', () => {
      // Medir tempo de carregamento
      const startTime = Date.now()
      
      cy.visit('/estudantes')
      cy.waitForPageLoad()
      
      const loadTime = Date.now() - startTime
      expect(loadTime).to.be.lessThan(5000) // M√°ximo 5 segundos
      
      cy.log(`‚úÖ P√°gina carregada em ${loadTime}ms`)
    })
  })

  afterEach(() => {
    // Log de sucesso do teste
    cy.log('‚úÖ Teste executado com sucesso')
  })
})
