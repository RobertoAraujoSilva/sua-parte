import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://nwpuurgwnnuejqinkvrh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53cHV1cmd3bm51ZWpxaW5rdnJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0NjIwNjUsImV4cCI6MjA3MDAzODA2NX0.UHjSvXYY_c-_ydAIfELRUs4CMEBLKiztpBGQBNPHfak';

const supabase = createClient(supabaseUrl, supabaseKey);

async function applyAdminDashboardMigration() {
  console.log('üöÄ Aplicando migra√ß√£o do AdminDashboard...');
  
  try {
    // 1. Verificar se as tabelas existem
    console.log('üîç Verificando estrutura das tabelas...');
    
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erro ao acessar tabela profiles:', profilesError);
      return;
    }
    
    console.log('‚úÖ Tabela profiles acess√≠vel');
    
    // 2. Verificar se h√° usu√°rios admin
    const { data: adminUsers, error: adminError } = await supabase
      .from('profiles')
      .select('id, email, role')
      .eq('role', 'admin');
    
    if (adminError) {
      console.error('‚ùå Erro ao buscar usu√°rios admin:', adminError);
      return;
    }
    
    console.log('üë• Usu√°rios admin encontrados:', adminUsers.length);
    adminUsers.forEach(user => {
      console.log(`   - ${user.email} (${user.role})`);
    });
    
    // 3. Verificar tabela estudantes
    const { data: estudantes, error: estudantesError } = await supabase
      .from('estudantes')
      .select('count')
      .limit(1);
    
    if (estudantesError) {
      console.log('‚ö†Ô∏è Tabela estudantes n√£o existe ou n√£o acess√≠vel');
    } else {
      console.log('‚úÖ Tabela estudantes acess√≠vel');
    }
    
    // 4. Verificar tabela programas
    const { data: programas, error: programasError } = await supabase
      .from('programas')
      .select('count')
      .limit(1);
    
    if (programasError) {
      console.log('‚ö†Ô∏è Tabela programas n√£o existe ou n√£o acess√≠vel');
    } else {
      console.log('‚úÖ Tabela programas acess√≠vel');
    }
    
    // 5. Testar fun√ß√£o is_admin_user se existir
    try {
      const { data: adminCheck, error: adminCheckError } = await supabase
        .rpc('is_admin_user');
      
      if (adminCheckError) {
        console.log('‚ö†Ô∏è Fun√ß√£o is_admin_user n√£o existe ainda');
      } else {
        console.log('‚úÖ Fun√ß√£o is_admin_user funcionando');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Fun√ß√£o is_admin_user n√£o existe ainda');
    }
    
    // 6. Testar view admin_dashboard_stats se existir
    try {
      const { data: stats, error: statsError } = await supabase
        .from('admin_dashboard_stats')
        .select('*');
      
      if (statsError) {
        console.log('‚ö†Ô∏è View admin_dashboard_stats n√£o existe ainda');
      } else {
        console.log('‚úÖ View admin_dashboard_stats funcionando');
        console.log('üìä Estat√≠sticas:', stats[0]);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è View admin_dashboard_stats n√£o existe ainda');
    }
    
    console.log('\nüéØ Status do AdminDashboard:');
    console.log('   - ‚úÖ Conex√£o Supabase: Funcionando');
    console.log('   - ‚úÖ Tabela profiles: Acess√≠vel');
    console.log('   - ‚ö†Ô∏è Tabelas dependentes: Verificar');
    console.log('   - ‚ö†Ô∏è Fun√ß√µes admin: N√£o implementadas');
    console.log('   - ‚ö†Ô∏è Views admin: N√£o implementadas');
    
    console.log('\nüí° Para fazer o AdminDashboard funcionar completamente:');
    console.log('   1. Aplicar migra√ß√£o SQL no Supabase Dashboard');
    console.log('   2. Ou executar: npx supabase db push (se configurado)');
    console.log('   3. Ou aplicar manualmente o SQL da migra√ß√£o');
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
applyAdminDashboardMigration();
