import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://nwpuurgwnnuejqinkvrh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53cHV1cmd3bm51ZWpxaW5rdnJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0NjIwNjUsImV4cCI6MjA3MDAzODA2NX0.UHjSvXYY_c-_ydAIfELRUs4CMEBLKiztpBGQBNPHfak';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkProfilesStructure() {
  console.log('üîç Verificando estrutura real da tabela profiles...');
  
  try {
    // 1. Verificar estrutura da tabela profiles
    const { data: profilesSample, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erro ao acessar profiles:', profilesError);
      return;
    }
    
    console.log('‚úÖ Tabela profiles acess√≠vel');
    
    if (profilesSample && profilesSample.length > 0) {
      const profile = profilesSample[0];
      console.log('\nüìä COLUNAS DISPON√çVEIS:');
      Object.keys(profile).forEach(key => {
        console.log(`   - ${key}: ${typeof profile[key]} = ${profile[key]}`);
      });
      
      console.log('\nüìù EXEMPLO DE DADOS:');
      console.log(JSON.stringify(profile, null, 2));
    } else {
      console.log('‚ö†Ô∏è Tabela profiles est√° vazia');
    }
    
    // 2. Verificar se h√° usu√°rios admin
    console.log('\nüëë Verificando usu√°rios admin...');
    
    // Tentar diferentes campos poss√≠veis para role
    const possibleRoleFields = ['role', 'cargo', 'tipo', 'user_role', 'role_type'];
    
    for (const field of possibleRoleFields) {
      try {
        const { data, error } = await supabase
          .from('profiles')
          .select(`id, ${field}`)
          .limit(5);
        
        if (!error && data && data.length > 0) {
          console.log(`‚úÖ Campo '${field}' encontrado!`);
          console.log('   Valores √∫nicos:', [...new Set(data.map(item => item[field]))]);
          break;
        }
      } catch (error) {
        // Campo n√£o existe, continuar
      }
    }
    
    // 3. Verificar se h√° campo congregacao
    console.log('\nüè¢ Verificando campo congregacao...');
    
    try {
      const { data: congregacoes, error: congregacoesError } = await supabase
        .from('profiles')
        .select('congregacao')
        .not('congregacao', 'is', null)
        .limit(5);
      
      if (congregacoesError) {
        console.log('‚ö†Ô∏è Campo congregacao n√£o existe ou n√£o acess√≠vel');
      } else {
        console.log('‚úÖ Campo congregacao encontrado!');
        console.log('   Valores √∫nicos:', [...new Set(congregacoes.map(item => item.congregacao))]);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo congregacao n√£o existe');
    }
    
    // 4. Contar total de usu√°rios
    console.log('\nüìä Contando total de usu√°rios...');
    
    try {
      const { count, error } = await supabase
        .from('profiles')
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel contar usu√°rios:', error.message);
      } else {
        console.log(`‚úÖ Total de usu√°rios: ${count}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao contar usu√°rios:', error.message);
    }
    
    console.log('\nüéØ PROBLEMA IDENTIFICADO:');
    console.log('   O AdminDashboard n√£o est√° funcionando porque:');
    console.log('   1. A tabela profiles tem estrutura diferente do esperado');
    console.log('   2. Campos como "email" e "role" podem n√£o existir');
    console.log('   3. O sistema est√° tentando acessar colunas inexistentes');
    
    console.log('\nüí° SOLU√á√ÉO IMEDIATA:');
    console.log('   Modificar o AdminDashboard para usar a estrutura real da tabela');
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
checkProfilesStructure();
