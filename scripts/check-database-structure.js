import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://nwpuurgwnnuejqinkvrh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53cHV1cmd3bm51ZWpxaW5rdnJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0NjIwNjUsImV4cCI6MjA3MDAzODA2NX0.UHjSvXYY_c-_ydAIfELRUs4CMEBLKiztpBGQBNPHfak';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabaseStructure() {
  console.log('üîç Verificando estrutura real do banco de dados...');
  
  try {
    // 1. Verificar estrutura da tabela profiles
    console.log('\nüìã Verificando tabela profiles...');
    
    const { data: profilesSample, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erro ao acessar profiles:', profilesError);
    } else {
      console.log('‚úÖ Tabela profiles acess√≠vel');
      if (profilesSample && profilesSample.length > 0) {
        console.log('üìä Colunas dispon√≠veis:', Object.keys(profilesSample[0]));
        console.log('üìù Exemplo de dados:', profilesSample[0]);
      }
    }
    
    // 2. Verificar se existe tabela auth.users
    console.log('\nüîê Verificando tabela auth.users...');
    
    try {
      const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
      if (authError) {
        console.log('‚ö†Ô∏è N√£o √© poss√≠vel acessar auth.users (normal para usu√°rios n√£o-admin)');
      } else {
        console.log('‚úÖ Tabela auth.users acess√≠vel');
        console.log('üë• Total de usu√°rios:', authUsers.users.length);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o √© poss√≠vel acessar auth.users (normal para usu√°rios n√£o-admin)');
    }
    
    // 3. Verificar tabela estudantes
    console.log('\nüë• Verificando tabela estudantes...');
    
    try {
      const { data: estudantes, error: estudantesError } = await supabase
        .from('estudantes')
        .select('*')
        .limit(1);
      
      if (estudantesError) {
        console.log('‚ö†Ô∏è Tabela estudantes n√£o existe ou n√£o acess√≠vel:', estudantesError.message);
      } else {
        console.log('‚úÖ Tabela estudantes acess√≠vel');
        if (estudantes && estudantes.length > 0) {
          console.log('üìä Colunas dispon√≠veis:', Object.keys(estudantes[0]));
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar estudantes:', error.message);
    }
    
    // 4. Verificar tabela programas
    console.log('\nüìö Verificando tabela programas...');
    
    try {
      const { data: programas, error: programasError } = await supabase
        .from('programas')
        .select('*')
        .limit(1);
      
      if (programasError) {
        console.log('‚ö†Ô∏è Tabela programas n√£o existe ou n√£o acess√≠vel:', programasError.message);
      } else {
        console.log('‚úÖ Tabela programas acess√≠vel');
        if (programas && programas.length > 0) {
          console.log('üìä Colunas dispon√≠veis:', Object.keys(programas[0]));
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar programas:', error.message);
    }
    
    // 5. Listar todas as tabelas dispon√≠veis
    console.log('\nüóÑÔ∏è Verificando tabelas dispon√≠veis...');
    
    try {
      // Tentar acessar algumas tabelas comuns
      const commonTables = ['congregacoes', 'family_members', 'invitations_log', 'meetings', 'designacoes'];
      
      for (const tableName of commonTables) {
        try {
          const { data, error } = await supabase
            .from(tableName)
            .select('count')
            .limit(1);
          
          if (error) {
            console.log(`   ‚ö†Ô∏è ${tableName}: ${error.message}`);
          } else {
            console.log(`   ‚úÖ ${tableName}: Acess√≠vel`);
          }
        } catch (error) {
          console.log(`   ‚ùå ${tableName}: ${error.message}`);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar tabelas:', error.message);
    }
    
    console.log('\nüéØ RESUMO DO STATUS:');
    console.log('   - O AdminDashboard n√£o est√° funcionando porque:');
    console.log('     1. As tabelas esperadas n√£o existem ou t√™m estrutura diferente');
    console.log('     2. As migra√ß√µes n√£o foram aplicadas');
    console.log('     3. O banco est√° em estado inicial');
    
    console.log('\nüí° SOLU√á√ïES:');
    console.log('   1. Aplicar todas as migra√ß√µes SQL no Supabase Dashboard');
    console.log('   2. Ou criar as tabelas manualmente');
    console.log('   3. Ou usar o sistema como est√° (funcionalidades limitadas)');
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
checkDatabaseStructure();
