import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://nwpuurgwnnuejqinkvrh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53cHV1cmd3bm51ZWpxaW5rdnJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0NjIwNjUsImV4cCI6MjA3MDAzODA2NX0.UHjSvXYY_c-_ydAIfELRUs4CMEBLKiztpBGQBNPHfak';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkEstudantesData() {
  console.log('üîç Verificando dados reais na tabela estudantes...');
  
  try {
    // 1. Verificar estrutura da tabela estudantes
    const { data: estudantesSample, error: estudantesError } = await supabase
      .from('estudantes')
      .select('*')
      .limit(1);
    
    if (estudantesError) {
      console.error('‚ùå Erro ao acessar estudantes:', estudantesError);
      return;
    }
    
    console.log('‚úÖ Tabela estudantes acess√≠vel');
    
    if (estudantesSample && estudantesSample.length > 0) {
      const estudante = estudantesSample[0];
      console.log('\nüìä COLUNAS DISPON√çVEIS:');
      Object.keys(estudante).forEach(key => {
        console.log(`   - ${key}: ${typeof estudante[key]} = ${estudante[key]}`);
      });
    } else {
      console.log('‚ö†Ô∏è Tabela estudantes est√° vazia');
    }
    
    // 2. Contar total de estudantes
    console.log('\nüìä Contando total de estudantes...');
    
    try {
      const { count, error } = await supabase
        .from('estudantes')
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel contar estudantes:', error.message);
      } else {
        console.log(`‚úÖ Total de estudantes: ${count}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao contar estudantes:', error.message);
    }
    
    // 3. Verificar se h√° dados de exemplo
    console.log('\nüîç Verificando dados de exemplo...');
    
    try {
      const { data: sampleData, error: sampleError } = await supabase
        .from('estudantes')
        .select('*')
        .limit(5);
      
      if (sampleError) {
        console.log('‚ö†Ô∏è Erro ao buscar dados de exemplo:', sampleError.message);
      } else if (sampleData && sampleData.length > 0) {
        console.log('‚úÖ Dados de exemplo encontrados:');
        sampleData.forEach((estudante, index) => {
          console.log(`\n   ${index + 1}. ${estudante.nome || estudante.nome_completo || 'Nome n√£o definido'}`);
          console.log(`      Cargo: ${estudante.cargo || 'N√£o definido'}`);
          console.log(`      G√™nero: ${estudante.genero || 'N√£o definido'}`);
          console.log(`      Ativo: ${estudante.ativo || 'N√£o definido'}`);
        });
      } else {
        console.log('‚ö†Ô∏è Nenhum dado encontrado na tabela estudantes');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar dados de exemplo:', error.message);
    }
    
    // 4. Verificar tabela programas
    console.log('\nüìö Verificando tabela programas...');
    
    try {
      const { data: programas, error: programasError } = await supabase
        .from('programas')
        .select('*')
        .limit(5);
      
      if (programasError) {
        console.log('‚ö†Ô∏è Erro ao acessar programas:', programasError.message);
      } else if (programas && programas.length > 0) {
        console.log(`‚úÖ ${programas.length} programas encontrados`);
        programas.forEach((programa, index) => {
          console.log(`   ${index + 1}. ${programa.titulo || programa.nome || 'T√≠tulo n√£o definido'}`);
          console.log(`      Data: ${programa.data || programa.data_inicio || 'Data n√£o definida'}`);
        });
      } else {
        console.log('‚ö†Ô∏è Tabela programas est√° vazia');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar programas:', error.message);
    }
    
    console.log('\nüéØ DIAGN√ìSTICO COMPLETO:');
    console.log('   O AdminDashboard n√£o est√° funcionando porque:');
    console.log('   1. ‚úÖ Tabelas existem e s√£o acess√≠veis');
    console.log('   2. ‚ùå Tabelas est√£o vazias (sem dados)');
    console.log('   3. ‚ùå N√£o h√° usu√°rios cadastrados');
    console.log('   4. ‚ùå N√£o h√° estudantes cadastrados');
    console.log('   5. ‚ùå N√£o h√° programas cadastrados');
    
    console.log('\nüí° SOLU√á√ïES:');
    console.log('   1. CADASTRAR DADOS DE EXEMPLO:');
    console.log('      - Criar usu√°rio admin');
    console.log('      - Cadastrar alguns estudantes');
    console.log('      - Importar programa de exemplo');
    
    console.log('   2. USAR FUNCIONALIDADES EXISTENTES:');
    console.log('      - Sistema de cadastro de estudantes');
    console.log('      - Importa√ß√£o de planilhas Excel');
    console.log('      - Sistema de designa√ß√µes');
    
    console.log('   3. TESTAR COM DADOS REAIS:');
    console.log('      - Fazer login como admin');
    console.log('      - Cadastrar dados atrav√©s da interface');
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
checkEstudantesData();
