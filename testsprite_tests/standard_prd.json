{
  "meta": {
    "project": "Sistema Ministerial Verification System",
    "date": "2025-09-10",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "O Sistema Ministerial é uma plataforma completa para gestão das designações da Escola do Ministério Teocrático das Testemunhas de Jeová, integrando frontend React, backend Node.js, autenticação via Supabase, automação de downloads de materiais oficiais da JW.org, gerenciamento de estudantes e programas e dashboards dedicados para administradores, instrutores e estudantes.",
  "core_goals": [
    "Prover uma plataforma unificada para gestão de materiais e designações ministeriais.",
    "Automatizar o download e processamento de materiais oficiais da JW.org.",
    "Garantir controle de acesso seguro e baseado em perfis (admin, instrutor, estudante).",
    "Oferecer interfaces intuitivas e responsivas para diferentes tipos de usuários.",
    "Implementar regras de negócio específicas (S-38-T) para designações ministeriais.",
    "Fornecer relatórios avançados e ferramentas de monitoramento do sistema.",
    "Assegurar alta qualidade com testes automatizados e monitoramento de performance."
  ],
  "key_features": [
    "Admin Dashboard com abas para downloads, materiais, publicações e monitoramento em tempo real.",
    "Backend Node.js com APIs REST e serviços para download e parsing de conteúdos da JW.org.",
    "Sistema de autenticação robusto utilizando Supabase Auth com controle de roles.",
    "Gerenciamento completo de estudantes com formulário, importação via Excel e edição inline em planilha.",
    "Importação e parsing automático de programas ministeriais a partir de PDFs e conteúdo copiado do JW.org.",
    "Geração automática de designações respeitando as regras S-38-T de elegibilidade e balanceamento.",
    "Portal do estudante com acesso às designações pessoais e histórico de participações.",
    "Sistema de gestão familiar com envio de convites e relacionamentos familiares.",
    "Testes E2E completos com Cypress para validação das funcionalidades.",
    "Scripts unificados para simplificar o desenvolvimento e execução do sistema completo."
  ],
  "user_flow_summary": [
    "Administrador acessa o Admin Dashboard via login e visualiza estatísticas e status do sistema.",
    "Administrador executa verificação e download automático de materiais da JW.org através do Dashboard.",
    "Materiais baixados são listados para administração e posterior publicação para congregações.",
    "Instrutor realiza cadastro e gestão de estudantes individualmente ou por importação em massa.",
    "Instrutor importa programas ministeriais via upload de PDF ou conteúdos copiados do JW.org.",
    "Instrutor gera designações automaticamente baseado no programa, respeitando regras S-38-T.",
    "Estudante acessa portal seguro para visualizar suas designações e histórico de participação.",
    "Sistema mantém sincronização e monitoramento do status, com logs e health checks disponíveis.",
    "Testes automatizados são executados via comandos npm para garantir integridade contínua do sistema."
  ],
  "validation_criteria": [
    "O Admin Dashboard deve estar acessível em http://localhost:8080/admin e funcional com integração backend real.",
    "O backend Node.js deve responder nas APIs REST e processar downloads automáticos corretamente na porta 3001.",
    "Autenticação deve permitir login seguro para perfis admin, instrutor e estudante via Supabase Auth.",
    "Importação de estudantes com validação e planilha editável deve salvar dados corretamente e sem erros.",
    "Importação de programas via PDF e texto copiado deve extrair dados e permitir edição.",
    "Designações geradas devem respeitar as regras de elegibilidade e evitar conflitos conforme S-38-T.",
    "Portal do estudante deve apresentar as designações atuais e histórico com dados precisos.",
    "Testes Cypress devem passar integralmente, validando as principais funcionalidades.",
    "Scripts npm para início do sistema (dev:all, dev:backend-only, dev:frontend-only) devem funcionar sem falhas.",
    "Monitoramento e debug devem apresentar logs, health checks e status em tempo real no Dashboard."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Node.js",
      "Express",
      "Supabase",
      "PostgreSQL",
      "Vite",
      "TailwindCSS",
      "Cypress"
    ],
    "features": [
      {
        "name": "Frontend React Application",
        "description": "Main React frontend application with TypeScript, running on port 8080",
        "files": [
          "src/App.tsx",
          "src/main.tsx",
          "vite.config.ts",
          "package.json"
        ]
      },
      {
        "name": "Backend Node.js Server",
        "description": "Express.js backend server with API routes, running on port 3000",
        "files": [
          "backend/server.js",
          "backend/package.json",
          "backend/.env"
        ]
      },
      {
        "name": "Admin Dashboard",
        "description": "Administrative interface for managing materials and programs from JW.org",
        "files": [
          "src/pages/AdminDashboard.tsx",
          "src/pages/AdminDashboardNew.tsx",
          "src/components/PDFProgrammingManager.tsx"
        ]
      },
      {
        "name": "PDF Programming Management",
        "description": "System to scan and parse PDF files from JW.org for program extraction",
        "files": [
          "src/hooks/usePDFProgramming.ts",
          "backend/services/pdfParser.js",
          "backend/routes/admin.js"
        ]
      },
      {
        "name": "Authentication System",
        "description": "User authentication and authorization using Supabase Auth",
        "files": [
          "src/contexts/AuthContext.tsx",
          "src/pages/Auth.tsx",
          "src/utils/authErrorHandler.ts"
        ]
      },
      {
        "name": "JW.org Integration",
        "description": "Automatic download and processing of materials from JW.org",
        "files": [
          "backend/services/jwDownloader.js",
          "backend/services/materialManager.js",
          "backend/config/mwbSources.json"
        ]
      },
      {
        "name": "Student Management",
        "description": "System for managing students and their assignments",
        "files": [
          "src/pages/Estudantes.tsx",
          "src/components/EstudanteForm.tsx",
          "src/hooks/useEstudantes.ts"
        ]
      },
      {
        "name": "Program Management",
        "description": "Management of ministerial programs and assignments",
        "files": [
          "src/pages/Programas.tsx",
          "src/components/ProgramManager.tsx",
          "backend/services/programGenerator.js"
        ]
      },
      {
        "name": "Database Integration",
        "description": "Supabase PostgreSQL database integration with migrations",
        "files": [
          "src/integrations/supabase/client.ts",
          "supabase/migrations/",
          "backend/config/supabase.js"
        ]
      },
      {
        "name": "API Routes",
        "description": "RESTful API endpoints for frontend-backend communication",
        "files": [
          "backend/routes/admin.js",
          "backend/routes/materials.js",
          "backend/routes/programs.js"
        ]
      }
    ]
  }
}
